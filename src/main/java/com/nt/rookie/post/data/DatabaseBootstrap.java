package com.nt.rookie.post.data;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.nt.rookie.post.common.DateUtil;
import com.nt.rookie.post.domain.Author;
import com.nt.rookie.post.domain.Authority;

public class DatabaseBootstrap {

    private List<Authority> mockAuthorityList() {
        List<Authority> authoritys = new ArrayList<Authority>();
        authoritys.add(new Authority("admin", "admin"));
        authoritys.add(new Authority("user", "user"));
        return authoritys;
    }

    private List<Author> mockAuthorList() {
        List<Author> authors = new ArrayList<Author>();
        authors.add(new Author("test", "test", "Hoang", "Nguyen", "test@google.com", DateUtil.convertToDate("1984/12/01"), new Date()));
        authors.add(new Author("user", "user", "Duong", "Do", "duongdo@google.com", DateUtil.convertToDate("1990/01/01"), new Date()));
        return authors;
    }

    public void initializeDatabase() {
        try (Connection conn = DriverManager.getConnection("jdbc:h2:~/posts", "", "");) {

            // Drop tables
            try (PreparedStatement prepStm = conn.prepareStatement("DROP TABLE IF EXISTS authorities")) {
                prepStm.execute();
            }
            try (PreparedStatement prepStm = conn.prepareStatement("DROP TABLE IF EXISTS authors;")) {
                prepStm.execute();
            }
            try (PreparedStatement prepStm = conn.prepareStatement("DROP TABLE IF EXISTS posts;")) {
                prepStm.execute();
            }

            // Create tables
            try (PreparedStatement prepStm = conn.prepareStatement(
                    "CREATE TABLE `authorities` (`username` varchar(30) NOT NULL, `authority` varchar(256) NOT NULL);")) {
                prepStm.execute();
            }
            try (PreparedStatement prepStm = conn.prepareStatement(
                    "CREATE TABLE `authors` (`username` varchar(30) NOT NULL, `password` varchar(60) NOT NULL, `first_name` varchar(50) NOT NULL, `last_name` varchar(50) NOT NULL, `email` varchar(100) NOT NULL, `birthdate` date NOT NULL, `added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (`username`), UNIQUE KEY `email` (`email`));")) {
                prepStm.execute();
            }
            try (PreparedStatement prepStm = conn.prepareStatement(
                    "CREATE TABLE `posts` (`id` int NOT NULL AUTO_INCREMENT, `author` varchar(30) NOT NULL, `title` varchar(255) NOT NULL, `description` varchar(500) NOT NULL, `content` text NOT NULL, `date` date NOT NULL, PRIMARY KEY (`id`));")) {
                prepStm.execute();
            }

            // Insert Authority
            List<Authority> authorities = mockAuthorityList();
            for (Authority authority : authorities) {
                try (PreparedStatement prepStm = conn.prepareStatement(
                        "INSERT INTO authorities (username, authority) values (?,?);");) {
                    int index = 1;
                    prepStm.setString(index++, authority.getUsername());
                    prepStm.setString(index++, authority.getAuthority());
                    prepStm.execute();
                }
            }

            // Insert Author
            List<Author> authors = mockAuthorList();
            for (Author author : authors) {
                try (PreparedStatement prepStm = conn.prepareStatement(
                        "INSERT INTO authors (username, password, first_name, last_name, email, birthdate, added) values (?,?,?,?,?,?,?);");) {
                    int index = 1;
                    prepStm.setString(index++, author.getUsername());
                    prepStm.setString(index++, author.getPassword());
                    prepStm.setString(index++, author.getFirstName());
                    prepStm.setString(index++, author.getLastName());
                    prepStm.setString(index++, author.getEmail());
                    prepStm.setDate(index++, new java.sql.Date(author.getBirthdate().getTime()));
                    prepStm.setTimestamp(index++, new java.sql.Timestamp(author.getAdded().getTime()));
                    prepStm.execute();
                }
            }

            // Insert Post
            try (PreparedStatement prepStm = conn.prepareStatement(
                    "INSERT INTO posts (author, title, description, content, date) values (?,?,?,?,?);");) {
                {int index = 1;
                    prepStm.setString(index++, "test");
                    prepStm.setString(index++, "Manage data in Docker");
                    prepStm.setString(index++, "How to use volumes and bind mounts in Docker.");
                    prepStm.setString(index++, "<p>Imagining your running containers are forced to stop for an unexpected reason. How can you back upthe data of those containers when you don’t store it in advance?</p><h1 id=\"brief-contents\">Brief contents</h1><ul class=\"markdown\">  <li><a href=\"#introduction\">Introduction</a></li>  <li><a href=\"#post-premise\">Post premise</a></li>  <li><a href=\"#target-audience\">Target audience</a></li>  <li><a href=\"#practical-example\">Practical example</a></li>  <li><a href=\"#ways-to-manage-data-in-docker\">Ways to manage data in Docker</a></li>  <li><a href=\"#use-volumes\">Use volumes</a></li>  <li><a href=\"#use-bind-mounts\">Use bind mounts</a></li>  <li><a href=\"#summary\">Summary</a></li>  <li><a href=\"#references\">References</a></li></ul><h2 id=\"introduction\">Introduction</h2><p>The data of a container doesn’t persist when that container no longer exists, and it can be difficult to get the data out of the container if another process needs it.So in this post, I would like to show you how to use Docker command to save the data.</p><h2 id=\"post-premise\">Post premise</h2><p>Coming from the passion of sharing of mine towards readers. And after surfing some references and guidanceso hopefully, this little knowledge could be helpful for you in learning as well as working that you encounter.</p><h2 id=\"target-audience\">Target audience</h2><p>This post is heading towards to the people taking a step to learn to get familiar with docker.</p><h2 id=\"practical-example\">Practical example</h2><p>Suppose I have a database that runs as a container:</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker run <span class=\"nt\">--name</span> no-persisted-db <span class=\"nt\">-d</span> <span class=\"nt\">-p</span> 4306:3306 <span class=\"nt\">-e</span> <span class=\"nv\">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class=\"o\">=</span>YES mysql:latest</code></pre></div></div><p>After I have created a schema and filled in some data in that database,the data is unfortunately gone, for my PC loses power.</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker <span class=\"nb\">rm </span>no-persisted-db <span class=\"nt\">-f</span></code></pre></div></div><p>You don’t have to turn off your PC in order to procedure the case. Just type the above command :))</p><p>Let make it right! Try the following command:</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker run <span class=\"nt\">--name</span> persisted-db <span class=\"nt\">-d</span> <span class=\"nt\">-p</span> 4306:3306 <span class=\"nt\">-e</span> <span class=\"nv\">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class=\"o\">=</span>YES <span class=\"nt\">-v</span> lib-mysql:/var/lib/mysql mysql:latest</code></pre></div></div><p>From now, when you stop/remove the container, the data will still persist, because the data is now mapped on the <strong>Docker host</strong>.</p><h2 id=\"ways-to-manage-data-in-docker\">Ways to manage data in Docker</h2><p><img src=\"/img/posts/02-schema.png\"></p><p>Docker has two options for containers to store files in the host machine, so that files arepersisted even after the container stops: <strong>volumes</strong>, and <strong>bind mounts</strong>.</p><h2 id=\"use-volumes\">Use volumes</h2><blockquote>  <p><strong>Volumes</strong> are stored in a part of the host filesystem which is managed by Docker (<code class=\"highlighter-rouge\">/var/lib/docker/volumes</code> on Linux).</p></blockquote><p>You can create a new volume by using the following command:</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker volume create my-vol</code></pre></div></div><p>If you start a container with a volume that does not yet exist, Docker creates the volume for you.</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker run <span class=\"nt\">--name</span> persisted-db <span class=\"nt\">-d</span> <span class=\"nt\">-p</span> 4306:3306 <span class=\"nt\">-e</span> <span class=\"nv\">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class=\"o\">=</span>YES <span class=\"nt\">-v</span> lib-mysql:/var/lib/mysql mysql:latest</code></pre></div></div><p>With the above command, Docker will create a new volume if <code class=\"highlighter-rouge\">lib-mysql</code> volume does not exist.</p><p><code class=\"highlighter-rouge\">-v</code> or <code class=\"highlighter-rouge\">--volume</code>: Consists of three fields, separated by colon characters (<code class=\"highlighter-rouge\">:</code>).The fields must be in the correct order, and the meaning of each field is not immediatelyobvious.</p><ul>  <li>The first field is a volume name. If not specified, it will be considered as anonymous volumes.</li>  <li>The second field is the path where the file or directory is mounted in the container</li>  <li>The third field is optional, and is a comma-separated list of options, such as <code class=\"highlighter-rouge\">ro</code>.<span class=\"markdown\"><a target=\"_blank\" href=\"https://docs.docker.com/storage/volumes/#use-a-read-only-volume\">Refer to</a></span></li></ul><h3 id=\"create-and-manage-volumes\">Create and manage volumes</h3><p>There are few command to create and manage volumes. No need to remember you can look up thosecommands by using <code class=\"highlighter-rouge\">docker volume --help</code>. The following are few examples.</p><p><strong>Create a volume:</strong></p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker volume create lib-mysql</code></pre></div></div><p><strong>List volumes:</strong></p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker volume <span class=\"nb\">lslocal       </span>lib-mysql</code></pre></div></div><p><strong>Inspect a volume:</strong></p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker volume inspect lib-mysql<span class=\"o\">[</span>    <span class=\"o\">{</span>        <span class=\"s2\">\"Driver\"</span>: <span class=\"s2\">\"local\"</span>,        <span class=\"s2\">\"Labels\"</span>: <span class=\"o\">{}</span>,        <span class=\"s2\">\"Mountpoint\"</span>: <span class=\"s2\">\"/var/lib/docker/volumes/lib-mysql/_data\"</span>,        <span class=\"s2\">\"Name\"</span>: <span class=\"s2\">\"lib-mysql\"</span>,        <span class=\"s2\">\"Options\"</span>: <span class=\"o\">{}</span>,        <span class=\"s2\">\"Scope\"</span>: <span class=\"s2\">\"local\"</span>    <span class=\"o\">}</span><span class=\"o\">]</span></code></pre></div></div><p><strong>Remove a volume:</strong></p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker volume <span class=\"nb\">rm </span>lib-mysql</code></pre></div></div><h2 id=\"use-bind-mounts\">Use bind mounts</h2><blockquote>  <p><strong>Bind mounts</strong> may be stored anywhere in host machine. They may even be important system filesor directories. Non-Docker processes on the Docker host or a Docker container can modify them at any time.</p></blockquote><p>Consider a case where you have a source directory and that each time you build the source codeon the Docker host, you want the artifacts to be available to the container that gets access to the rebuilt artifacts.</p><p>For example, I want a <code class=\"highlighter-rouge\">dist/</code> folder after built by <code class=\"highlighter-rouge\">Angular</code> CLI is available to <code class=\"highlighter-rouge\">/usr/share/nginx/html</code> location on a <code class=\"highlighter-rouge\">NGINX</code>container. Let’s follow these steps to create bind mounts:</p><ol>  <li>    <p>Open a terminal on Linux. For me, I’m using Window OS so I run <code class=\"highlighter-rouge\">Powershell</code> terminal.</p>  </li>  <li>    <p>Point to your intended mount folder path. Moreover, you can create a private folder, then copy the built artifact to the folder.<br><img class=\"border\" src=\"/img/posts/02-1.png\"></p>  </li>  <li>Let’s type the following command:    <div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker run <span class=\"nt\">-d</span> <span class=\"nt\">-p</span> 80:80 <span class=\"nt\">-v</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">pwd</span><span class=\"k\">}</span><span class=\"s2\">:/usr/share/nginx/html\"</span> nginx:latest</code></pre></div>    </div>    <p>Here, the <code class=\"highlighter-rouge\">${pwd}</code> sub-command specify the current working directory on the host machine.</p>  </li>  <li>Let’s now browse the <code class=\"highlighter-rouge\">localhost:80</code> to see the result.<br><img class=\"border\" src=\"/img/posts/02-2.png\"></li></ol><blockquote>  <p>We also use the <code class=\"highlighter-rouge\">-v</code> option for bind mounts, but different in terms of meaning:</p></blockquote><p><code class=\"highlighter-rouge\">-v</code> or <code class=\"highlighter-rouge\">--volume</code>: Consists of three fields, separated by colon characters (<code class=\"highlighter-rouge\">:</code>).The fields must be in the correct order, and the meaning of each field is not immediatelyobvious.</p><ul>  <li>The first field is the path to the file or directory on the <strong>host machine</strong></li>  <li>The second field is the path where the file or directory is mounted in the container</li>  <li>The third field is optional, and is comma-separated list of options, such as <code class=\"highlighter-rouge\">ro</code>,<code class=\"highlighter-rouge\">consistent</code>, <code class=\"highlighter-rouge\">delegated</code>, <code class=\"highlighter-rouge\">cached</code>, <code class=\"highlighter-rouge\">z</code>, and <code class=\"highlighter-rouge\">Z</code>.<span class=\"markdown\"><a target=\"_blank\" href=\"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation\">Refer to</a></span></li></ul><h2 id=\"summary\">Summary</h2><p>Depending on your previous experience with Docker, this post might have been a steep learning curve.You should now</p><ul>  <li>Understand why need to manage data in Docker</li>  <li>Distinguish between volumes and bind mounts</li>  <li>Be able to choose the right type of mount</li></ul><h2 id=\"references\">References</h2><ul class=\"markdown\">  <li><a href=\"https://docs.docker.com/storage/\" target=\"_blank\">Manage data in Docker</a></li>  <li><a href=\"https://docs.docker.com/storage/volumes/\" target=\"_blank\">Use volumes</a></li>  <li><a href=\"https://docs.docker.com/storage/bind-mounts/\" target=\"_blank\">Use bind mounts</a></li>  <li><a href=\"http://www.allitebooks.org/docker-in-practice/\" target=\"_blank\">Docker in practice</a></li></ul>        <hr>        <div id=\"disqus_thread\"><iframe id=\"dsq-app7715\" name=\"dsq-app7715\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" tabindex=\"0\" title=\"Disqus\" width=\"100%\" src=\"https://disqus.com/embed/comments/?base=default&amp;f=duongnd&amp;t_u=https%3A%2F%2Fduongnd2016.gitlab.io%2F2019%2F05%2F20%2Fmanage-data-in-docker.html&amp;t_d=Manage%20data%20in%20Docker%20-%20Ocean%20Nguyen's%20Blog&amp;t_t=Manage%20data%20in%20Docker%20-%20Ocean%20Nguyen's%20Blog&amp;s_o=default#version=d540fd3421e2252f4918b57237dfe813\" style=\"width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 394px !important;\" horizontalscrolling=\"no\" verticalscrolling=\"no\"></iframe></div>        <script>          /**           *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.           *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/          /*          var disqus_config = function () {          this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable          this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable          };          */          (function() { // DON'T EDIT BELOW THIS LINE            var d = document, s = d.createElement('script');            s.src = 'https://duongnd.disqus.com/embed.js';            s.setAttribute('data-timestamp', +new Date());            (d.head || d.body).appendChild(s);          })();        </script>        <noscript>Please enable JavaScript to view the <a href=\"https://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>");
                    prepStm.setDate(index++, new java.sql.Date(new Date().getTime()));
                    prepStm.execute();
                }
                {int index = 1;
                    prepStm.setString(index++, "test");
                    prepStm.setString(index++, "How to create a Docker image");
                    prepStm.setString(index++, "Easy steps to build a Docker image with Dockerfile.");
                    prepStm.setString(index++, "<p>Running applications in containers instead of virtual machines is gaining momentum in the IT world.</p><p>Docker really makes it easier to create, deploy, and run applications by using containers.And containers allow a developer to package up an application with all of the parts it needs, such as librariesand other dependencies, and ship it all out as one package.</p><h1 id=\"brief-contents\">Brief contents</h1><ul class=\"markdown\">  <li><a href=\"#introduction\">Introduction</a></li>  <li><a href=\"#post-premise\">Post premise</a></li>  <li><a href=\"#target-audience\">Target audience</a></li>  <li><a href=\"#ways-to-create-a-new-docker-image\">Ways to create a new Docker image</a></li>  <li><a href=\"#writing-a-dockerfile\">Writing a Dockerfile</a>    <ul>      <li><a href=\"#1-from\">1. FROM</a></li>      <li><a href=\"#2-run\">2. RUN</a></li>      <li><a href=\"#3-copy\">3. COPY</a></li>      <li><a href=\"#4-workdir\">4. WORKDIR</a></li>      <li><a href=\"#5-expose\">5. EXPOSE</a></li>      <li><a href=\"#6-cmd\">6. CMD</a></li>    </ul>  </li>  <li><a href=\"#building-a-docker-image\">Building a Docker image</a></li>  <li><a href=\"#sample\">Sample</a></li>  <li><a href=\"#summary\">Summary</a></li>  <li><a href=\"#question\">Question</a></li>  <li><a href=\"#references\">References</a></li></ul><h2 id=\"introduction\">Introduction</h2><p>With the strength of Docker, a platform that allows you to build, ship, run any app, anywhere.So in this post, I would like to mention some easy steps in how I build a Docker image.</p><h2 id=\"post-premise\">Post premise</h2><p>Coming from the passion of sharing of mine towards readers. And after surfing some references and guidanceso hopefully, this little knowledge could be helpful for you in learning as well as working that you encounter.</p><h2 id=\"target-audience\">Target audience</h2><p>This post is heading towards to the people taking a step to learn to get familiar with docker.</p><h2 id=\"ways-to-create-a-new-docker-image\">Ways to create a new Docker image</h2><p>There are four standard ways to create Docker images.</p><table>  <thead>    <tr>      <th>Method</th>      <th>Description</th>    </tr>  </thead>  <tbody>    <tr>      <td>Docker commands “By hand”</td>      <td>Fire up a container with docker run and input the commands to create your image on the command line. Create a new image with docker commit.</td>    </tr>    <tr>      <td>Dockerfile</td>      <td>Build from a known base image, and specify build with a limited set of simple.</td>    </tr>    <tr>      <td>Dockerfile and configuration management (CM) tool</td>      <td>Same as Dockerfile, but hand over control of the build to a more sophisticated CM tool.</td>    </tr>    <tr>      <td>Scratch image and import a set of files</td>      <td>From an empty image, import a TAR file with the required files.</td>    </tr>  </tbody></table><p>We’ll look at the <strong>method Dockerfile</strong> now because of its most common use cases in practices.The other methods I’ll cover later when needed.</p><h2 id=\"writing-a-dockerfile\">Writing a Dockerfile</h2><p>A Dockerfile is a text file with a series of commands in it. Here’s the Dockerfile we’re going to use for this example:</p><div class=\"language-dockerfile highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#1. Define the base image</span><span class=\"k\">FROM</span><span class=\"s\"> node:10.5</span><span class=\"c\">#2. Create /app/src folder</span><span class=\"k\">RUN </span><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> /app/src<span class=\"c\">#3. Copy from local files to the built image</span><span class=\"k\">COPY</span><span class=\"s\"> [\"package.json\", \"package-lock.json\", \"./\"]</span><span class=\"c\">#4. Run the node package manager's install command (npm)</span><span class=\"k\">RUN </span>npm <span class=\"nb\">install</span><span class=\"c\">#5. Move dependencies to the stored source code folder</span><span class=\"k\">RUN </span><span class=\"nb\">mv </span>node_modules /app/src<span class=\"c\">#6. cd /app/src</span><span class=\"k\">WORKDIR</span><span class=\"s\"> /app/src</span><span class=\"c\">#7. Copy source code to the built image</span><span class=\"k\">COPY</span><span class=\"s\"> [\".\", \"./\"]</span><span class=\"c\">#8. Specify that containers from built image should listen on this port</span><span class=\"k\">EXPOSE</span><span class=\"s\"> 4000</span><span class=\"c\">#9. Sepcify which command will be run on startup</span><span class=\"k\">CMD</span><span class=\"s\"> [\"npm\", \"start\"]</span></code></pre></div></div><p>Let’s focus on Docker keywords. Don’t worry if the programming language commands offending you.</p><h4 id=\"1-from\">1. <code class=\"highlighter-rouge\">FROM</code></h4><p>You begin the Dockerfile by defining the base image with <code class=\"highlighter-rouge\">FROM</code> command.This example uses a Nodejs image so you have access to the Nodejs binaries.</p><blockquote>  <p>A Docker image is built up from a series of layers. Each layer represents an instruction in the image’sDockerfile</p></blockquote><p>So simply saying is you start building your image base on a built-in environment contributed by Docker community.You don’t need to build from scratch.</p><h4 id=\"2-run\">2. <code class=\"highlighter-rouge\">RUN</code></h4><blockquote>  <p>The <code class=\"highlighter-rouge\">RUN</code> instruction specifies commands run in a shell/terminal.</p></blockquote><p>There are three <code class=\"highlighter-rouge\">RUN</code> commands in the script.</p><p>The first one is used to create a root folder <code class=\"highlighter-rouge\">2</code>. This uses the specified command on linux distro,running <code class=\"highlighter-rouge\">mkdir -p /app/src</code> within the container. The second is used to run the node packagemanager’s install command (npm) <code class=\"highlighter-rouge\">4</code>. This will set up the dependencies for your application.The last command moves <code class=\"highlighter-rouge\">node_modules</code> to the stored source folder (/app/src).</p><h4 id=\"3-copy\">3. <code class=\"highlighter-rouge\">COPY</code></h4><blockquote>  <p>The <code class=\"highlighter-rouge\">COPY</code> instruction copies files or directories from sources and adds them to the filesystem of the container at the destination path.</p></blockquote><p>Copying <code class=\"highlighter-rouge\">package.json</code> and <code class=\"highlighter-rouge\">package-lock.json</code> from your local source to the current path of the container <code class=\"highlighter-rouge\">3</code>.Next, the entire source code will be copied from the local to /app/src folder of the container <code class=\"highlighter-rouge\">7</code></p><h4 id=\"4-workdir\">4. <code class=\"highlighter-rouge\">WORKDIR</code></h4><p>You move to /app/src path with a <code class=\"highlighter-rouge\">WORKDIR</code> command <code class=\"highlighter-rouge\">6</code>. Not only does this change directorywithin the build context, but the last <code class=\"highlighter-rouge\">WORKDIR</code> command determines which directory you’re inby default when you start up container from your built image.</p><h4 id=\"5-expose\">5. <code class=\"highlighter-rouge\">EXPOSE</code></h4><p>Because port 4000 is used by the application, you use the <code class=\"highlighter-rouge\">EXPOSE</code> command to tell Docker thatcontainer from the built image should listen on this port <code class=\"highlighter-rouge\">8</code>.</p><h4 id=\"6-cmd\">6. <code class=\"highlighter-rouge\">CMD</code></h4><p>Finally, you use the <code class=\"highlighter-rouge\">CMD</code> command to tell Docker which command will be run on startup of the container <code class=\"highlighter-rouge\">9</code>.</p><h2 id=\"building-a-docker-image\">Building a Docker image</h2><p>You’ve defined your Dockerfile’s build steps. Now you’re going to build the Docker image from it by typing the following command</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker build <span class=\"nt\">-t</span> my-docker-image <span class=\"nb\">.</span></code></pre></div></div><p>Let me explain briefly the above command. We use <code class=\"highlighter-rouge\">docker build</code> command to build our imagewith <code class=\"highlighter-rouge\">-t</code> option to specify an image name then tell Docker path to our Dockerfile file by specifying <code class=\"highlighter-rouge\">.</code></p><p>Now you can run your built image by typing the command:</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker run <span class=\"nt\">--name</span> my-docker-image <span class=\"nt\">-d</span> <span class=\"nt\">-p</span> 8080:4000 my-docker-image</code></pre></div></div><p>Let browse <code class=\"highlighter-rouge\">localhost:8080</code> to see the result. You can any port available (8080) from your host to expose your container.</p><h2 id=\"sample\">Sample</h2><p>You can check out my sample from<span class=\"markdown\">    <a target=\"_blank\" href=\"https://github.com/oceannguyen/duongnd.com-creating-a-docker-image\">here</a>.</span></p><h2 id=\"summary\">Summary</h2><p>Depending on your previous experience with Docker, this post might have been a steep learning curve.You should now</p><ul>  <li>Understand what a Dockerfile is</li>  <li>Know some Dockerfile commands</li>  <li>Be able to commit a new Docker image from a base image</li>  <li>Create a useful application</li></ul><h2 id=\"question\">Question</h2><p>Have been you wondered why shouldn’t I just use one <code class=\"highlighter-rouge\">COPY</code> command instead of segregating in two <code class=\"highlighter-rouge\">RUN</code> commands?</p><h2 id=\"references\">References</h2><ul class=\"markdown\">  <li><a href=\"http://www.allitebooks.org/docker-in-practice/\" target=\"_blank\">Docker in practice</a></li>  <li><a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\">Dockerfile reference</a></li></ul>        <hr>        <div id=\"disqus_thread\"><iframe id=\"dsq-app3592\" name=\"dsq-app3592\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" tabindex=\"0\" title=\"Disqus\" width=\"100%\" src=\"https://disqus.com/embed/comments/?base=default&amp;f=duongnd&amp;t_u=https%3A%2F%2Fduongnd2016.gitlab.io%2F2019%2F05%2F11%2Fhow-to-create-a-docker-image.html&amp;t_d=How%20to%20create%20a%20Docker%20image%20-%20Ocean%20Nguyen's%20Blog&amp;t_t=How%20to%20create%20a%20Docker%20image%20-%20Ocean%20Nguyen's%20Blog&amp;s_o=default#version=d540fd3421e2252f4918b57237dfe813\" style=\"width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 394px !important;\" horizontalscrolling=\"no\" verticalscrolling=\"no\"></iframe></div>        <script>          /**           *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.           *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/          /*          var disqus_config = function () {          this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable          this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable          };          */          (function() { // DON'T EDIT BELOW THIS LINE            var d = document, s = d.createElement('script');            s.src = 'https://duongnd.disqus.com/embed.js';            s.setAttribute('data-timestamp', +new Date());            (d.head || d.body).appendChild(s);          })();        </script>        <noscript>Please enable JavaScript to view the <a href=\"https://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>");
                    prepStm.setDate(index++, new java.sql.Date(new Date().getTime()));
                    prepStm.execute();
                }
                {int index = 1;
                    prepStm.setString(index++, "test");
                    prepStm.setString(index++, "Implement MVC Servlet với Form");
                    prepStm.setString(index++, "Steps to create Servlet with form");
                    prepStm.setString(index++, "1. Form sẽ là GET hay POST<br>2. Nghĩ tên Servlet: package, class, jsp, url<br>3. Định nghĩa và mapping trong file web.xml<br>4. Tạo file Servlet<br>5. Có apply PRG hay sẽ sang ngay jsp?<br>6. Tạo jsp<br>- Copy language và các import library, util, entity<br>- Implement<br>- Import header.jsp và footer.jsp<br>");
                    prepStm.setDate(index++, new java.sql.Date(new Date().getTime()));
                    prepStm.execute();
                }
            }

            System.out.println("Initiate database Posts successfully!");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
